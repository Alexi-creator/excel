
    Данный курс дает фундаментальное понимание работы
      Js программирования.

    После каждого урока нужно обдумать все и передалать
      самостоятельно, для осознания!


    Пример данного курса будет SPA программа Excel


       Создаем рабочее окружение:

- Webpack (import/exports):
  Babel
  Scss
  Eslint
  2 Modes
    - Dev (разработка):
      Dev Server(обновление страницы), SourceMaps(для Scss, так же соединение модулей), Eslint(поддержка чистоты кода), Not minified JS & CSS (для неминифицированного css кода, только для удобства разработки)
    - Prod (продакшен):
      Minified Code (минификация кода)

- Git:
  Production
    1.0.0
    0(№ ветки) ----------- (колличество кода)
  Development
    1.0.2
    1(№ ветки)              --------------   PR(Pull request)      (колличество кода)
    2(№ ветки, это копия 1) ---------------- |(совмещаем 2 ветку с 1)      (колличество кода)
    если совмещение удачное все работает стабильно
    то 2 ветка удаляется
    затем если разработка заканчивается то ветка разработки
    сливается с продакшен веткой



                Начинаем проект:

      Создаем git проект и Инициализируем

      создаем файл webpack.config.js

      Инициализируем проект с зависимостями:

        npm init


      Webpack устнавливаем через npm:

        npm install webpack webpack-cli --save-dev


в package.json в 'scripts' пишем:

"scripts": {
  "start": "webpack",
  "build": "webpack --mode production"
}

после чего у нас доступны коданда в консоле
для запуска проекта в режиме разработки 'npm run start'
и запуск билда проекта для продакшен 'npm run build'




  далее в webpack.config.js

начинаем прописывать и устанавливать webpack модули для работы
это типа как в gulp так же через npm скачиваем и подключаем:

// для работы с html файлами
npm install --save-dev html-webpack-plugin

npm install copy-webpack-plugin --save-dev

// для очистки папки
npm install --save-dev clean-webpack-plugin

// для выноса css файла из js
npm install --save-dev mini-css-extract-plugin



  Все модули можно посмотреть на сайте webpack!


  далее создаем файл index.html в папке src там должны лежать все
  наши исходники, так мы указали в webpack.config.js

  в нем пишем <div id='app' class='container'></div>



  после чего если запустить команду start то в папке dist
  у нас будет появляться boundle.js(это и есть наш главный файл index.js) и index.html с подключенным boundle.js




            Loaders

  Loaders это сущности которые пропускают через себя
    разные расширения файлов например css и превращают их в js


нам нужны:

// для Sass в js
npm install sass-loader sass --save-dev

// для css
npm install --save-dev css-loader


подключаем их не как переменные а сразу в module и rules, но в scss лодере доп прописываем настройки


  далее создаем файл index.scss в папке src/scss/


теперь файлы scss переносятся в формат js и подключаются в
основной файл js в формате css






              далее работаем с babel

    устанавливаем и подключаем так же как и др.

npm install --save-dev babel-loader @babel/core
npm install @babel/preset-env --save-dev
npm install --save @babel/polyfill

в package.json подключаем для кроссбраузерности:
"browserslist": "> 0.25%, not dead",




            далее работаем с режимами сборки

    Это нужно для того чтобы знать что делать в разных режимах?
    например минификация только тогда когда режим production

  есть системная переменная, чтобы убедится что она правильно
  работает устанавливаем модуль:

    npm i -D cross-env  // данный пакет определяет какая операционная система

    чтобы работать с этим пакетом в package.json пишем:
    в script > start > cross-env NODE_ENV=development
    в script > build > cross-env NODE_ENV=production

    а в webpack.config создаем переменные:

    - isProd
    - isDev




              devServer

      для динамического обновления

      устнавливаем:

      npm install webpack-dev-server --save-dev

      и прописываем в package.json в start:

      "start": "webpack-dev-server --open" // --open это для автоматического открытия страницы в браузере

      Может не зупустится!!! Это из-за пакетов, несовместимых с друг другом
      работающий конфиг версий пакетов:

      "webpack": "^4.41.2",
      "webpack-cli": "^3.3.10",
      "webpack-dev-server": "^3.9.0"





                Далее Eslint для чистоты кода

        npm i eslint eslint-loader babel-eslint --save-dev

        так же пишем ф-ю для добавления лоадер eslint если в режиме разработки

        далее в корне нашего приложения не в src создаем файл:
         .eslintrc

        где описываем базовую конфигурацию для eslinta
        в частности правила по которым eslint не будет помечать ошибки

        и .eslintingnore для игора



        далее устанавливаем:

        npm i --save-dev eslint-config-google

        в eslintrc дописываем "extends": ["eslint:recommended", "google"]



        в webstorm заходим в файл > settings
        мануальально выбираем eslint из папки nide_modules куда мы его скачали через npm
        и выбираем конфигурационный файл который обрабатывает его, это тот файл который мы создали: .eslintrc
        в нем прописываем напимер правила на которые он не будет ругатся и подсвечивать красным в js коде




            Далее пример работы с GIT

            сейчас мы работали в ветке webpack это клон ветки master где почти ничего небыло
            далее мы настроили webpack идр моменты и теперь готовы слится с основной master веткой

            в GitHub можно это делать визуально удобно, так же там можно оставлять комменты
            под любой строчкой кода любого файла который мы отправили туда.

            !если в консоле написать git checkout master мы перейдем на master ветку где
            почти ничего небыло, это автоматически в папке нашего проекта сделает такую же
            структуру файлов как на GitHub в ветке мастер! Т.е. наша папка где git init
            теперь полностью синхронизируется с github а там может быть разные ветки итд

            потом делаем merge pull request слияние веток обратно в основную master
            и теперь код единый т.е. все файлы будут где не было изменений и теже файлы
            с самыми последними изменениями!



            Теперь для следующей задачи так же делаем клон мастер ветки
            в которой все самые последние рабочие проверенные изменения
            и чтобы ее не запороть делаем новую клон ветку в которой будем
            работать, как только все будет идеально сделано, снова делаем
            слияние! Итд. т.е. все есть продакшн ветка в которой 100% все
            работает, и перед тем как что то допиливать делаем клон ветку
            допиливаем тестим и только потом мержим сливай в одну продакшн
            главную ветку мастер!




            Далее делаем верстку!
            Прежде чем начать создаем копию ветки:

            git checkout -b "css-layout"



            Верстаем в файле разметки index.html

            делаем шаблоны страниц в папке src/assets
            - dashboard.html
            - excel.html

            к каждому этому файлу создаем свой scss файл стилей

            после верстки коммитим это все в ветке css-layout
            git add .
            git commit -m "fgfdg"
            git push -u origin css-layout

            после чего заходим на gitHub и делаем pull request
            сливаем с главной веткой master


            далее переключаемся через консоль в мастер ветку:

            git checkout master

            и чтобы обновить нашу локальную директорию с обновленными
            данными(master ветка) пишем:

            git pull

            она теперь самая свежая и передовая, далее можно работать
            в ней или же опять с идеальной ветки клонировать новую









            далее новый этап разработки, поэтому создаем новую ветку:

            git checkout -b "framework-start"


            в этом этапе создаем свой фреймворк

            так же нам нужно будет настроить роутинг переключение на
            другие страницы шаблона


            наш проект это аналог онлайн google excel

            в разметке html есть блоки header formula toolbar table (компоненты)
            все эти блоки должны слушать остальные блоки, чтобы при изменении
            в одном менялось чтолибо в другом.

            Поэтому нужно создать класс нпример DOMListener который будет
            общий для всех таких элементов которым нужно слушать изменения

            в этом классе должны быть методы:
                - добавления слушателя
                - удаление слушателя (что бы не было утечки памяти и приложение не тормозило)


            Так же нужен класс ExcelComponent для всех компонетов элементов блоков
            и этот класс раз он так же подходит для тех же элементов (header formula toolbar table)
            может наследовать класс DOMListener т.к.



            Компонент Excel это будет такой общий компонент который добавляет
            как раз те мелкие компоненты на страницу и рендерит ее.


            ПОДРОБНЕЕ со схемой проекта(логика разработки) видео №29



            далее создаем папку src/core
            в ней будем хранить базовые составляющие для приложения


            в этой директории создаем класс в виде файла js
            core/DomListener.js это будет тот самый класс
            который нужен для компонентов (слушать страницу)

            таким же образом создаем ExcelComponent.js





            далее создаем директорию src/components
            в ней будут лежать компоненты (header, tools итд)

            а в ней еще директории(где будут компонеты):

            src/components/excel

            далее там создаем файл
            src/components/excel/Excel.js    это будет сам компонент







            далее создаем компонент и директорию для него
            components/header/Header.js

            аналогично для компонентов formula и toolbar




    в index.js это главный файл нашего spa подключены все модули компоненты
    в нем работаем со всеми другими js файлами в которых классы
    а значит мы можем создавать экземпляры этих классов прямо в index.js
    это удобно т.к. есть главный файл и компоненты которые каждый отвечает
    за свое.

    создаем методы для динамического создания div и помещением туда разметки из
    комопнентов, например header, formula итд
    так же этим блокам задаем класс(селектор) который мы уже заранее
    описали в scss и когда это загрузится на страницу css уже есть




            debugger

    если в коде написать debugger
    то после этой строчки код возпроизводится не будет т.е. будет точка остановки
    и если зайти в отладчик в sources там будет видно что код остановил
    свой исполнение на этой строчке где написано debugger
    соответственно можно проверить в каком сейчас состоянии находится
    тот или иной элемент чтобы проверить где ошибка.



    далее работаем с компонентами и слушанием их событий.


